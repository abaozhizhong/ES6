{"version":3,"sources":["../../js/7-arrayextend.js"],"names":["arraylike","length","array","Array","from","console","log","x","lis","document","querySelectorAll","lisArray","stringArray","map","a","typesOf","arguments","value","NaN","of","copyWithin","myfindResult","n","find","findResult","index","arr","findIndex","fill","keys","item","entries","elem","includes","N","nodeIsArrayBuffer","a1","a2"],"mappings":";;;;;;AAAA;;;AAGA;;;AAGA;AACA,IAAIA,YAAY;AACZ,SAAK,GADO;AAEZ,SAAK,GAFO;AAGZ,SAAK,GAHO;AAIZC,YAAQ,CAJI,CAID;AAJC,CAAhB;AAMA,IAAIC,QAAQC,MAAMC,IAAN,CAAWJ,SAAX,EAAsB,aAAK;AACnCK,YAAQC,GAAR,CAAYC,CAAZ;AACA,WAAOA,IAAIA,CAAX;AACH,CAHW,CAAZ,C,CAGG;AACHF,QAAQC,GAAR,CAAYJ,KAAZ;;AAEA;AACA,IAAIM,MAAMC,SAASC,gBAAT,CAA0B,IAA1B,CAAV;AACAL,QAAQC,GAAR,CAAYE,GAAZ,E,CAAiB;AACjB,IAAIG,WAAWR,MAAMC,IAAN,CAAWI,GAAX,CAAf;AACAH,QAAQC,GAAR,CAAYK,QAAZ,E,CAAsB;;AAEtB;AACA,IAAIC,cAAcT,MAAMC,IAAN,CAAW,SAAX,CAAlB;AACAC,QAAQC,GAAR,CAAYM,WAAZ;;AAEA;AACAP,QAAQC,GAAR,CACIJ,MAAMW,GAAN,CAAU,UAAUC,CAAV,EAAa;AAAG;AACtBT,YAAQC,GAAR,CAAYQ,CAAZ;AACA,WAAOA,IAAIA,CAAX;AACH,CAHD,CADJ;;AAOA;AACA,SAASC,OAAT,GAAmB;AACf,WAAOZ,MAAMC,IAAN,CAAWY,SAAX,EAAsB;AAAA,sBAAgBC,KAAhB,yCAAgBA,KAAhB;AAAA,KAAtB,CAAP;AACH;AACDZ,QAAQC,GAAR,CAAYS,QAAQ,IAAR,EAAc,EAAd,EAAkBG,GAAlB,CAAZ;;AAEA;AACAb,QAAQC,GAAR,CAAYH,MAAMC,IAAN,CAAW,EAACH,QAAQ,CAAT,EAAX,EAAwB,YAAM;AACtC,QAAIM,IAAI,CAAR;AACA,WAAOA,GAAP;AACH,CAHW,CAAZ;;AAKA;;;AAGA;;;AAGAF,QAAQC,GAAR,CAAYH,MAAMgB,EAAN,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAZ;AACAd,QAAQC,GAAR,CAAYH,MAAMgB,EAAN,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkBlB,MAA9B;;AAGA;;;AAGA;AACA;AACA;;AAEAI,QAAQC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAac,UAAb,CAAwB,CAAxB,EAA2B,CAA3B,CAAZ;;AAEA;;;;AAIA,IAAIC,eAAe,CAAC,EAACC,GAAG,SAAJ,EAAD,EAAiB,EAACA,GAAG,KAAJ,EAAjB,EAA6B,EAACA,GAAG,OAAJ,EAA7B,EAA2C,EAACA,GAAG,QAAJ,EAA3C,EAA0DC,IAA1D,CAA+D,UAAChB,CAAD,EAAO;AACrF,QAAIA,EAAEe,CAAF,IAAO,KAAX,EACI,OAAOf,EAAEe,CAAT;AACP,CAHkB,CAAnB;;AAKA,IAAIE,aAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmBD,IAAnB,CAAwB,UAAUN,KAAV,EAAiBQ,KAAjB,EAAwBC,GAAxB,EAA6B;AAClE,WAAOD,QAAQ,CAAf;AACH,CAFgB,CAAjB;;AAIA,IAAIE,YAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaA,SAAb,CAAuB,UAAUV,KAAV,EAAiBQ,KAAjB,EAAwBC,GAAxB,EAA6B;AAChE,WAAOD,QAAQ,CAAf;AACH,CAFe,CAAhB;;AAIA;;;;AAIA;AACApB,QAAQC,GAAR,CACI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUsB,IAAV,CAAe,EAAf,CADJ;AAGA;AACAvB,QAAQC,GAAR,CACI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmBsB,IAAnB,CAAwB,OAAxB,EAAiC,CAAjC,EAAoC,CAApC,CADJ;;AAIA;;;AAGA;AACAvB,QAAQC,GAAR,CACI,CAAC,CAAD,EAAI,CAAJ,EAAOuB,IAAP,EADJ;;;;;;AAGA,yBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAOA,IAAP,EAAjB,8HAAgC;AAAA,YAAvBC,IAAuB;;AAC5BzB,gBAAQC,GAAR,CAAYwB,IAAZ;AACH;;AAED;AACA;AACA;;;;;;;;;;;;;;;;WACiB,CAAC,CAAD,EAAI,CAAJ,C;AAAjB,yCAAyB;AAApB,QAAIA,gBAAJ,CAAoB,CAAG;AACxBzB,YAAQC,GAAR,CAAYwB,KAAZ;AACH;;;;;;;AAED,0BAAyB,CAAC,GAAD,EAAM,GAAN,EAAWC,OAAX,EAAzB,mIAA+C;AAAA;;AAAA;;AAAA,YAArCN,KAAqC;AAAA,YAA/BO,IAA+B;;AAC3C3B,gBAAQC,GAAR,CAAYmB,KAAZ,EAAmBO,IAAnB;AACH;;AAED;;;;;;;;;;;;;;;;;;;AAIA3B,QAAQC,GAAR,CACI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU2B,QAAV,CAAmB,CAAnB,CADJ,CAC2B;AAD3B;AAGA5B,QAAQC,GAAR,CACI,CAAC,EAAC4B,GAAG,GAAJ,EAAD,EAAW,MAAX,EAAmBD,QAAnB,CAA4B,EAACC,GAAG,GAAJ,EAA5B,CADJ,CAC2C;AAD3C;;AAIA;AACA7B,QAAQC,GAAR,CAAY6B,mBACP,GAAG,CAAH,EAAM,CAAN,EAAS,CAAT,EAAY,CADL,GACQF,QADR,CACiB,CADjB,EACoB,CADpB,CAAZ;;AAIA;;;;AAIA;AACA,IAAIG,KAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAV;AACA;AACA/B,QAAQC,GAAR,CAAY+B,EAAZ","file":"7-arrayextend.js","sourcesContent":["/**\r\n * Created by huangjian on 2017/6/4.\r\n */\r\n/*\r\n *7.1转化类似数数组的对象 Array.from()\r\n * */\r\n//类似数组对象有length属性\r\nlet arraylike = {\r\n    '0': 'a',\r\n    \"2\": 'b',\r\n    \"1\": 'c',\r\n    length: 3  //要有length\r\n};\r\nlet array = Array.from(arraylike, x => {\r\n    console.log(x);\r\n    return x + x\r\n});//x=> {console.log(x); return x+x} 类似于map 方法\r\nconsole.log(array);\r\n\r\n//转nodeList 对象\r\nvar lis = document.querySelectorAll('li');\r\nconsole.log(lis);// type nodelist\r\nvar lisArray = Array.from(lis);\r\nconsole.log(lisArray);//type array\r\n\r\n//转字符串\r\nvar stringArray = Array.from('abaozhi');\r\nconsole.log(stringArray);\r\n\r\n//Array.from类似于map的方法\r\nconsole.log(\r\n    array.map(function (a) {  //map方法 返回一个新的数组\r\n        console.log(a);\r\n        return a + a\r\n    })\r\n);\r\n\r\n//返回数值类型\r\nfunction typesOf() {\r\n    return Array.from(arguments, value => typeof value);\r\n}\r\nconsole.log(typesOf(null, [], NaN));\r\n\r\n//产生一个数组  单单写一个length 属性 屌屌屌\r\nconsole.log(Array.from({length: 2}, () => {\r\n    let x = 1;\r\n    return x++\r\n}));\r\n\r\n//map中用到this关键字 ？？？\r\n\r\n\r\n/*\r\n *7.2 Array.of 一组值转换为数组\r\n * */\r\nconsole.log(Array.of(1, 2, 3));\r\nconsole.log(Array.of(1, 2, 3).length);\r\n\r\n\r\n/*\r\n *7.3数组实例 copyWith();\r\n * */\r\n// terget 替换的目标位置\r\n// start替换开始元素\r\n// end 替换的结束元素\r\n\r\nconsole.log([0, 1, 2, 3].copyWithin(1, 2));\r\n\r\n/*\r\n *\r\n * 7.4find() 与 findIndex()\r\n * */\r\nvar myfindResult = [{n: 'abaohzi'}, {n: 'aba'}, {n: 'abaoz'}, {n: 'abaozh'}].find((x) => {\r\n    if (x.n == 'aba')\r\n        return x.n\r\n});\r\n\r\nvar findResult = [0, 1, 2, 3, 5, 4].find(function (value, index, arr) {\r\n    return index > 4\r\n})\r\n\r\nvar findIndex = [1, 2, 3, 4].findIndex(function (value, index, arr) {\r\n    return index < 1\r\n})\r\n\r\n/*\r\n * 7.5数组实例的fill()\r\n *\r\n * */\r\n//全部填满\r\nconsole.log(\r\n    [1, 2, 3].fill(10)\r\n);\r\n//局部填满\r\nconsole.log(\r\n    [1, 2, 3, 4, 5, 6].fill(\"我在这里填\", 3, 4)\r\n);\r\n\r\n/*\r\n * 7.6 entries() keys() values()\r\n * */\r\n//均返回一个遍历对象\r\nconsole.log(\r\n    [1, 2].keys()\r\n);\r\nfor (let item of [1, 2].keys()) {\r\n    console.log(item);\r\n}\r\n\r\n// for(let elem of [1,2].values()){ values() 不是function\r\n//     console.log(elem);\r\n// }\r\nfor (let item of [1, 2]) {  //其实么有values也没关系啦。。。\r\n    console.log(item);\r\n}\r\n\r\nfor (let [index,elem] of ['a', 'b'].entries()) {\r\n    console.log(index, elem);\r\n}\r\n\r\n/*\r\n *\r\n *7. 7数组的includes()\r\n * */\r\nconsole.log(\r\n    [1, 2, 3].includes(2)  //包含则返回true\r\n);\r\nconsole.log(\r\n    [{N: 'A'}, 'null'].includes({N: 'A'})  //貌似这样不行耶\r\n);\r\n\r\n//第二个参数为搜索起始位置(默认结束为到数组结束)\r\nconsole.log(nodeIsArrayBuffer\r\n    [1, 2, 3, 3, 5].includes(3, 5)\r\n);\r\n\r\n/*\r\n *\r\n * 7.9 数组推导 产生新的数字  ES7 但是babel支持\r\n * */\r\n// let tuidao = [for(let item of [1, 2, 3]) if(item > 2)];\r\nvar a1  = [1,2,3,4];\r\n// var a2 = [ for (i of a1) i*2 ];\r\nconsole.log(a2);\r\n"]}