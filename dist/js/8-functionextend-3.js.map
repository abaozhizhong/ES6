{"version":3,"sources":["../../js/8-functionextend-3.js"],"names":["log","console","document","querySelectorAll","mypush","x","z","y","push","myfun","Math","max","arr","arr1","arr2","arr3","arr4","first","rest","nodelist","arraylist"],"mappings":";;;;;;AAAA;;;AAGA;;;;AAIA,qBAAQA,GAAR,kBAAY,CAAZ,SAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB,GAAyB,CAAzB;AACAC,QAAQD,GAAR,8BAAgBE,SAASC,gBAAT,CAA0B,IAA1B,CAAhB,I,CAAoD;;AAEpD;AACA,SAASC,MAAT,CAAgBC,CAAhB,EAAwB;AAAA;;AAAG;AACvB,QAAIC,IAAI,EAAR;;AADoB,sCAAHC,CAAG;AAAHA,SAAG;AAAA;;AAEpB,0BAAQP,GAAR,kBAAeO,CAAf,EAFoB,CAEF;AAClBD,MAAEE,IAAF,UAAUD,CAAV;AACA,WAAOD,CAAP;AACH;AACDL,QAAQD,GAAR,CAAYI,OAAO,EAAP,EAAU,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAV,CAAZ;;AAEA;AACA;AACA,IAAMK,QAAQ,SAARA,KAAQ,CAACJ,CAAD,EAAGE,CAAH,EAAKD,CAAL,EAAW;AACzBL,YAAQD,GAAR,CAAY,IAAZ,EAAiBK,CAAjB;AACAJ,YAAQD,GAAR,CAAY,IAAZ,EAAiBO,CAAjB;AACAN,YAAQD,GAAR,CAAY,IAAZ,EAAiBM,CAAjB;AACC,CAJD;AAKAG,uBAAS,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAT;;AAEA;AACAR,QAAQD,GAAR,CAAYU,IAAZ;IACKC,G,GAAOD,I,CAAPC,G;;AACLV,QAAQD,GAAR;AACI;AACAW,qBAAO,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAP,CAFJ;;AAKA;AACA,IAAIC,MAAM,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV;AACA,sBAAQZ,GAAR,kBACOY,GADP;AAGAA,IAAIJ,IAAJ,CAAS,CAAT,EAAW,CAAX,EAAa,CAAb,E,CAAgB;AAChBI,IAAIJ,IAAJ,YAAYI,GAAZ;;AAEA;;;;AAIA;AACA;AACA,IAAKC,OAAO,EAAZ;AACA,IAAKC,OAAO,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CAAZ;AACA,IAAKC,OAAO,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAZ;AACA,IAAIC,iBAAWF,IAAX,EAAmBC,IAAnB,CAAJ;AACAd,QAAQD,GAAR,CAAYgB,IAAZ;;AAEA;IACOC,K,GAAkB,I;IAATC,I,IAAc,G,EAAI,I,EAAK,I;;AACvCjB,QAAQD,GAAR,CAAYiB,KAAZ;AACAhB,QAAQD,GAAR,CAAYkB,IAAZ;;AAEA;;AAEA;AACA,IAAIC,WAAWjB,SAASC,gBAAT,CAA0B,IAA1B,CAAf,C,CAAiD;AACjD,IAAIiB,yCAAiBD,QAAjB,EAAJ;AACAlB,QAAQD,GAAR,CAAYoB,SAAZ","file":"8-functionextend-3.js","sourcesContent":["/**\r\n * Created by huangjian on 2017/6/5.\r\n */\r\n/*\r\n*\r\n* 8.3 扩展运算符  ... rest 的逆运算\r\n* */\r\nconsole.log(1,...[2,3,4],5);\r\nconsole.log([...document.querySelectorAll('li')]);  //nodelist   转为 array 类型\r\n\r\n//函数调用？？？\r\nfunction mypush(x,...y) {  //rest 将参数集中成一个数组\r\n    let z = [];\r\n    console.log(...y);//扩展运算符号 将参数序列变成一个一个数\r\n    z.push(...y);\r\n    return z\r\n}\r\nconsole.log(mypush(23,[6,7,8,9]));\r\n\r\n//替代数组的apply方法\r\n//直接序列化参数\r\nconst myfun = (x,y,z) => {\r\nconsole.log(\"x:\",x);\r\nconsole.log(\"y:\",y);\r\nconsole.log(\"z:\",z);\r\n}\r\nmyfun(...['c','n','m']);\r\n\r\n//求最大值\r\nconsole.log(Math);\r\nvar {max} = Math;\r\nconsole.log(\r\n    //求最大值 直接解参数\r\n    max(...[100,200,300])\r\n);\r\n\r\n//堆数组\r\nvar arr = [1,2,4]\r\nconsole.log(\r\n    ...arr\r\n);\r\narr.push(1,2,3);//原来可以这样。。。。\r\narr.push(...arr);\r\n\r\n/*\r\n*\r\n*扩展运算符的应用\r\n* */\r\n//数组合并新写法\r\n//es5 arr1.concat(arr2,arr3)\r\nvar  arr1 = [];\r\nvar  arr2 = ['a',\"b\",'c','d','e'];\r\nvar  arr3 = ['-','-','-'];\r\nvar arr4 = [...arr2,...arr3];\r\nconsole.log(arr4);\r\n\r\n//与解构赋值结合\r\nconst [first,...rest] = ['第一','1','23','其他'];\r\nconsole.log(first);\r\nconsole.log(rest);\r\n\r\n//函数返回值的问题\r\n\r\n//转化类似数组的对象\r\nvar nodelist = document.querySelectorAll('li');  // 其实Array.form() 也是可以的 方式nodelist 对象都可以这样转\r\nvar arraylist =  [...nodelist];\r\nconsole.log(arraylist);\r\n\r\n"]}